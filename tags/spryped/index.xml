<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spryped on Ben Bokser&#39;s Blog</title>
    <link>https://bbokser.github.io/tags/spryped/</link>
    <description>Recent content in Spryped on Ben Bokser&#39;s Blog</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bbokser.github.io/tags/spryped/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stable Bipedal Walking in Simulation</title>
      <link>https://bbokser.github.io/posts/2021-07-20/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://bbokser.github.io/posts/2021-07-20/</guid>
      <description>&lt;p&gt;In late 2019, I designed a custom QDD gearbox. Then I designed a bipedal robot with said gearing. By early 2020 I was spending about an hour per day after work coding a controller for the bipedal robot I had designed. In that time I learned a great deal of Python, and my controls proficiency skyrocketed. Then I started grad school and had to put this project on hold for about six months. But now, over a year and a half later, I&amp;rsquo;ve finally achieved stable bipedal walking in simulation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model Predictive Control for a Legged Robot</title>
      <link>https://bbokser.github.io/posts/2020-10-12/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://bbokser.github.io/posts/2020-10-12/</guid>
      <description>&lt;p&gt;I have recently implemented a model predictive controller (MPC) to calculate the necessary reaction forces for a legged robot. The work presented here is based on &lt;a href=&#34;https://arxiv.org/pdf/1909.06586.pdf&#34;&gt;this&lt;/a&gt; paper by Kim et al. If you don&amp;rsquo;t know what model predictive control is, I recommend &lt;a href=&#34;https://youtu.be/YwodGM2eoy4&#34;&gt;this&lt;/a&gt; excellent explanation by Steve Brunton. I also found &lt;a href=&#34;https://youtu.be/RrnkPrcpyEA&#34;&gt;this&lt;/a&gt; guide to model predictive control with CasADI to be extremely helpful. CasADi is an open source nonlinear optimization tool which I&amp;rsquo;m using for MPC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving for the Jacobians of a Robot Leg</title>
      <link>https://bbokser.github.io/posts/2020-05-04/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>https://bbokser.github.io/posts/2020-05-04/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently working on the Python &lt;a href=&#34;https://github.com/bbokser/spryped&#34;&gt;code&lt;/a&gt; to control a simulated version of my latest bipedal robot design in PyBullet. My focus over the past few weeks was getting the operational space control to work (many thanks to Travis DeWolf&amp;rsquo;s incredibly helpful &lt;a href=&#34;https://studywolf.wordpress.com/site-index/&#34;&gt;blog&lt;/a&gt;). After finally getting it to work properly, I have decided to share my math in the hopes of providing a useful example for anyone else having trouble with this. There really aren&amp;rsquo;t enough resources on the internet that explain this in a succinct manner.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
